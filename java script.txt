Q-1:-What is React Js?
ans:-ReactJS is an open-source JavaScript library that is used for building user interfaces in a declarative and efficient way. It is a component-based front-end library responsible only for the view layer of an MVC (Model View Controller) architecture. React is used to create modular user interfaces and it promotes the development of reusable UI components that display dynamic data.

ReactJS uses a declarative paradigm which makes it possible for applications to be both effective and flexible. It creates simple views for each state in your application and efficiently updates and renders just the right component when your data changes. The declarative view makes your code more predictable and easier to debug. Each component in a React application is responsible for rendering a separate, reusable piece of HTML code. The ability to nest components within other components allows for the building of complex applications from simple building blocks. A component may also keep track of its internal state, for example, a TabList component may keep a variable for the open tab in memory.

Q-2:-What is the use of is NaN function?
ans:-The JavaScript isNaN() Function is used to check whether a given value is an illegal number or not. It returns true if the value is a NaN else returns false. It is different from the Number.isNaN() Method.

Syntax:isNaN( value )
        

Parameter Values: This method accepts a single parameter as mentioned above and described below: 

value: It is a required value passed in the isNaN() function.
Return Value: It returns a Boolean value i.e. returns true if the value is NaN else returns false.

Example: In this example, we will check various values for isNan() and the output will be in boolean format.


    console.log(isNaN(12));
    console.log(isNaN(0 / 0));
    console.log(isNaN(12.3));
    console.log(isNaN("Geeks"));
    console.log(isNaN("13/12/2020"));
    console.log(isNaN(-46));
    console.log(isNaN(NaN));
Output:

false
true
false
true
true
false
true

Q-3:-What is negative Infinity?
Ans:-The negative infinity in JavaScript is a constant value that is used to represent a value that is the lowest available. This means that no other number is lesser than this value. It can be generated using a self-made function or by an arithmetic operation. 

Note: JavaScript shows the NEGATIVE_INFINITY value as -Infinity.

Negative infinity is different from mathematical infinity in the following ways:

*Negative infinity results in -0(different from 0 ) when divided by any other number.
*When divided by itself or positive infinity, negative infinity return NaN
*Negative infinity, when divided by any positive number (apart from positive infinity) is negative infinity.
*Negative infinity, divided by any negative number (apart from negative infinity) is positive infinity.
*If we multiply negative infinity with NaN, we will get NaN as a result.
*The product of 0 and negative infinity is Nan.
*The product of two negative infinities is always a positive infinity.
*The product of both positive and negative infinity is always negative infinity.

Syntax: Number.NEGATIVE_INFINITY

Example:


<!DOCTYPE html>
<html lang="en">
<head>
	<title>Document</title>
</head>

<body>
	<h1 style="color: green;">
		GeeksforGeeks
	</h1>
	<h3>
		What is negative infinity in JavaScript?
	</h3>
	<button onclick="geekPositiveInfinity()">
		Generate negative infinity
	</button>
	<p id="geek"></p>
	<script>
		function geekPositiveInfinity() {
			let n = (-Number.MAX_VALUE) * 2;
			document.getElementById("geek").innerHTML =
				"Here the number generated is twice of negative of Number.MAX_VALUE" + "<br>" +
				" which is lesser than lower limit" + "<br><br>" + n;
		}
	</script>
</body>
</html>


Q-4:-Which company developed JavaScript?
Ans:-JavaScript is a scripting language developed by Netscape. It can be used to program web browser or even servers. It can dynamically update the contents of the webpage, which is the beauty of JavaScript


Q-5:-What are undeclared and undefined variables?
Ans:-Undefined: It occurs when a variable has been declared but has not been assigned any value. Undefined is not a keyword. 

Undeclared: It occurs when we try to access any variable that is not initialized or declared earlier using the var or const keyword. If we use ‘typeof’ operator to get the value of an undeclared variable, we will face the runtime error with the return value as “undefined”. The scope of the undeclared variables is always global. 

"UNDEFINED"

let geek;
undefined
console.log(geek)

"UNDECLARED"

//ReferenceError: myVariable is not defined
console.log(myVariable)


Q-6:-Write the code for adding new elements dynamically?
Ans:-

Example: Elements can be created based on some event like a click. Here’s an example of how to create elements dynamically with an onclick event. This code can be further made into a todo-list!

<!DOCTYPE html>
<html lang="en">
  
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content=
        "width=device-width, initial-scale=1.0">
  
    <style>
        html,
        body {
            height: 100%;
            width: 100%;
        }
  
        .button {
            display: flex;
            align-items: center;
            justify-content: center;
        }
  
        .tasks {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            margin-top: 20px;
        }
    </style>
</head>
  
<body>
    <div class="button">
        <button id="addTask">Add task</button>
    </div>
    <div class="tasks"></div>
    <script type="text/javascript">
  
        // Getting the parent element in which
        // the new div will be created
        let task = document.getElementsByClassName("tasks");
  
        // Getting the addTask button element
        let addTask = document.getElementById("addTask");
          
        // Adding onclick event to the button
        addTask.addEventListener('click', function () {
      
            // Traversing through collection of HTML
            // elements (tasks here)
            for (let i = 0; i < task.length; i++) {
                  
                // New div element is created  
                let newDiv = document.createElement("div");
                      
                // Setting the attribute of class type to newDiv 
                newDiv.setAttribute("class", "list");
                     
                // innerText used to write the text in newDiv 
                newDiv.innerText = "New Div created";
                       
                // Finally append the newDiv to the
                // parent i.e. tasks   
                task[i].append(newDiv);
            }
        })
    </script>
</body>
  
</html>

Q-7:-What is the difference between ViewState and SessionState?
Ans:-

VIEWSTATE:- It is maintained at only one level that is page-level. Changes made on a single page is not visible on other pages. Information that is gathered in view state is stored for the clients only and cannot be transferred to any other place. View state is synonymous with serializable data only.

ViewState has a tendency for the persistence of page-instance-specific data. When view state is used, the values posted of a particular page persist in the browse area that the client is using and post back only when the entire operation is done. The data of the previous page is no longer available when another page is loaded. Also, Data is not secure in this case because it is exposed to clients. Encryption can be used for data security.

SESSIONSTATE:- It is maintained at session-level and data can be accessed across all pages in the web application. The information is stored within the server and can be accessed by any person that has access to the server where the information is stored.

SessionState has the tendency for the persistence of user-specific data and is maintained on the server-side. This data remains available until the time that the session is completed or the browser is closed by the user. The session state is only valid for type objects.

"VIEWSTATE"

View state can only be visible from a single page and not multiple pages.
It will retain values in the event of a postback operation occurring.	
Information is stored on the client’s end only.
used to allow the persistence of page-instance-specific data.
ViewState values are lost/cleared when new page is loaded.

"SESSIONSTATE"

Session state value availability is across all pages available in a user session.
In session state, user data remains in the server. Data is available to user until the browser is closed or there is session expiration.
Information is stored on the server.
used for the persistence of user-specific data on the server’s end.
SessionState can be cleared by programmer or user or in case of timeouts.


Q-8:-What is === operator?
Ans:-The strict equality operator (===) checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.	

Exaple:-

                        var a="30";
			var b=30;
			if(a===b) 
			{
				document.write('a equal to b with same data type');
			}
			else
			{
				document.write('a not equal to b or not same data type');
			}

Q-9:-How can the style/class of an element be changed?
Ans:-

1: Changing CSS with the help of the style property:
Syntax:
document.getElementById("id").style.property = new_style
Example: In this example, we have built a PAN number validator. First, we will take the input value and match it with a regex pattern. If it matches then using JavaScript add an inline style on the <p> tag. Otherwise, add a different style on the <p> tag.
<!DOCTYPE html>


<html lang="en">
<head>
<meta charset=”UTF-8”>
<meta Http-equiv=”X-UA-Compatible” content=”IE=edge”>
<meta name=”viewport” content=”width-device-width, initial-scale=1.0”>
<title>document</title>
</head>
  
<body>
    <h1 style="color: green;">
        GeeksforGeeks
    </h1>
  
    <h2>
        How can the style/class of
        an element be changed?
    </h2>
  
    <b>Validate Pan Number</b>
  
    <input type="text" id="pan" />
    <p></p>
    <button id="submit">Validate</button>
  
    <script>
        const btn = document.getElementById("submit");
        btn.addEventListener("click", function () {
            const pan = document.getElementById("pan").value;
            const para = document.querySelector("p");
  
            let regex = /([A-Z]){5}([0-9]){4}([A-Z]){1}$/;
            if (regex.test(pan.toUpperCase())) {
                para.innerHTML = "Hurrey It's correct";
  
                // Inline style
                para.style.color = "green";
            } else {
                para.innerHTML = "OOps It's wrong!";
  
                // Inline style
                para.style.color = "red";
            }
        });
    </script>
</body>
  
</html>


2. The className Property: This property is used to set the current class of the element to the specified class.
Syntax:
document.getElementById("id").className = class
Example:
HTML
<!DOCTYPE html>
<html lang="en">
  
<head>
<meta charset=”UTF-8”>
<meta Http-equiv=”X-UA-Compatible” content=”IE=edge”>
<meta name=”viewport” content=”width-device-width, initial-scale=1.0”>
<title>document</title>


    <style>
        .colorBlue {
            color: blue;
        }
  
        .colorRed {
            color: red;
        }
    </style>
</head>
  
<body>
    <h1 style="color: green;">
        GeeksforGeeks
    </h1>
      
    <h2>
        How can the style/class of 
        an element be changed?
    </h2>
      
    <h3>className Example</h3>
      
    <p class="colorBlue">
        GeeksforGeeks is a computer science portal
        for geeks.This platform has been designed
        for every geek wishing to expand their
        knowledge, share their knowledge and is
        ready to grab their dream job. GFG have
        millions of articles, live as well
        as online courses, thousands of tutorials
        and much more just for the geek inside you.
    </p>
      
    <button id="submit">Change Color</button>
  
    <script>
        const btn = document.getElementById("submit");
        const para = document.querySelector("p");
  
        btn.addEventListener("click", function () {
            para.className = "colorRed";
        });
    </script>
</body>
  
</html>


Q-10:-How to read and write a file using JavaScript?
Ans:-
(READ FILE):-After the File System module is imported, the reading of the file in JavaScript can be done by using the readFile() function.

Syntax

The syntax to read from a file is as follows −

readFile(path, format, callBackFunc)
The readFile() function accepts three parameters including one optional parameter.

*Path − The first parameter is the path of the test file from which the contents are to read. If the current location or directory is the same directory where the file which is to be opened and read is located then, only the file name has to be given.
*Format − The second parameter is the optional parameter which is the format of the text file. The format can be ASCII, utf-8 etc.
*CallBackFunc − The third parameter is the call back function which takes the error as the parameter and displays the fault is any raised due to the error.

(Write operation on a file):-After the File System file is imported then, the writeFile() operation is called. The writeFile() method is used to write into the file in JavaScript. 

The syntax of this method is as follows −
writeFile(path,inputData,callBackFunction)

The writeFile() function accepts three parameters −

*Path − The first parameter is the path of the file or the name of the file into which the input data is to be written.
If there is a file already, then the contents in the file are deleted and the input which is given by the user will get updated or if the file is not present, then the file with that will be created in the given path and the input information is written into it.
*inputData − The second parameter is the input data which contains the data to be written in the file that is opened.
*callBackFuntion − The third parameter is the function which is the call back function which takes the error as the parameter and shows the fault if the write operation fails.

Q-11:-What are all the looping structures in JavaScript?
Ans:-JavaScript supports different kinds of loops:

-->for - loops through a block of code a number of times.
-->for/in - loops through the properties of an object.
-->for/of - loops through the values of an iterable object.
-->while - loops through a block of code while a specified condition is true.

Q-12:-How can you convert the string of any base to an integer in JavaScript?
Ans:- Given a string containing an integer value and along with that user passes a base value. We need to convert that string of any base value to an integer in JavaScript.

*Syntax:

Following is the syntax that a user may use to convert a string into an integer value (of any base):-
parseInt(string_value, base)

Alternatively, if we don’t want to specify the base value and just want to convert our string value into an integer value itself, then we may use the following syntax also:-
parseInt(string_value)

Example:-

	
<script>
    let stringConversion = (string_value) => {
      console.log("Initial Type: " + typeof string_value);
      let integer_value = parseInt(string_value);
      console.log("Final Type: " + typeof integer_value);
      console.log(integer_value);
    };
      
    stringConversion("512000");
    stringConversion("126410");
    stringConversion("0x8975");
</script>


Q-13:- What is the function of the delete operator?
Ans:-The delete operator in JavaScript is used to delete an object’s property.

--->If it is used to delete an object property that already exists, it returns true and removes the property from the object. However, deleting an object property that doesn’t exist will not affect the object, but will still return true.

--->The only time false will be returned is when the delete operator is used to delete a variable or a function.

*Syntax

The syntax for using the delete operator is as follows:

delete object.property;
// OR
delete object["property"];

*Parameters

object: This is the object whose property we want to delete.
property: This is the property to be deleted.

Return value
The delete operator returns true if the specified property is deleted, or false if the property is not deleted.

Example:-	
	
let Boy = {
    name: "Arun",
    age: 22,
    country: "Nigeria"
}


let Girl = {
    name: "Khushi",
    age: 20,
    country : "Germany"
}


// log retured values after delete
console.log(delete Boy["country"]) // same as human.country
console.log(delete Girl.country) // same as dog["country"]


// log affected objects
console.log(Boy)  // "country" property deleted
console.log(Girl)    // "country" property deleted


Q-14:-What are all the types of Pop up boxes available in JavaScript?
Ans:-In Javascript, popup boxes are used to display the message or notification to the user. There are three types of pop-up boxes in JavaScript namely Alert Box, Confirm Box and Prompt Box.

{1}:-Alert Box: It is used when a warning message is needed to be produced. When the alert box is displayed to the user, the user needs to press ok and proceed.

Syntax: 
alert("your Alert here")

<!DOCTYPE html>
<html>
 
<head>
<meta charset=”UTF-8”>
<meta Http-equiv=”X-UA-Compatible” content=”IE=edge”>
<meta name=”viewport” content=”width-device-width, initial-scale=1.0”>


    <title>Pop-up Box type | Alert Box</title>
    <style>
        h1{
            color:green;
        }
    </style>
</head>
 
<body>
    <center>
 
        <h1>Tops Technology</h1>
 
        <h3>Alert Box</h3>
        <button onclick="topsAlert()">
            Click here for alert box
        </button>
         
        <!-- Alert box function -->
        <script>
            function topsAlert() {
                alert("An Online & Offline Computer Science"
                            + "Portal for Geeks");
            }
        </script>
    </center>
   
</body>
 
</html>

{2}:-Prompt Box: It is a type of pop up box which is used to get the user input for further use. After entering the required details user have to click ok to proceed next stage else by pressing the cancel button user returns the null value.

Syntax:  
prompt("your Prompt here")

Example:  

<!DOCTYPE html>
<html>
 
<head>
<meta charset=”UTF-8”>
<meta Http-equiv=”X-UA-Compatible” content=”IE=edge”>
<meta name=”viewport” content=”width-device-width, initial-scale=1.0”>


    <title>
        Pop-up Box type | Prompt Box
    </title>
    <style>
        h1 {
            color: green;
        }
    </style>
</head>
 
<body>
   
    <center>
 
        <h1>GeeksforGeeks</h1>
 
        <h3>Prompt Box</h3>
 
        <input type="button" onclick="geekPrompt();"
        value="Click here for Prompt box"/>
 
        <!-- Prompt box function -->
        <script>
            function geekPrompt() {
                var x = prompt("Enter your mail here : ");
                document.write("Your ID : " + x);
            }
        </script>
    </center>
   
</body>
 
</html>

{3}:-Confirm Box: It is a type of pop-up box that is used to get authorization or permission from the user. The user has to press the ok or cancel button to proceed.

Syntax:
confirm("your query here")

Example:  

<!DOCTYPE html>
<html>
 
<head>
<meta charset=”UTF-8”>
<meta Http-equiv=”X-UA-Compatible” content=”IE=edge”>
<meta name=”viewport” content=”width-device-width, initial-scale=1.0”>


    <title>
        Pop-up Box type | Confirm Box
    </title>
    <style>
        h1 {
            color: green;
        }
    </style>
</head>
 
<body>
    <center>
 
        <h1>GeeksforGeeks</h1>
 
        <h3>Confirm Box</h3>
 
        <button onclick="geekConfirm()">
            Click here for Confirm box
        </button>
 
        <p id="geek"></p>
 
 
        <!-- Confirm box function -->
        <script>
            function geekConfirm() {
                var x;
                if (confirm("Press a button!") == true) {
                    x = "OK pressed!";
                } else {
                    x = "Cancel!";
                }
                document.getElementById("geek").innerHTML = x;
            }
        </script>
    </center>
</body>
 
</html>


Q-15:-What is the use of Void (0)?
Ans:-Using “javascript:void(0);” in anchor tag: Writing “javascript:void(0);” in anchor tag can prevent the page to reload and JavaScript functions can be called on single or double clicks easily. 

Example: 

<!DOCTYPE html>
<html lang=”en”>
 
<head>
<meta charset=”UTF-8”>
<meta Http-equiv=”X-UA-Compatible” content=”IE=edge”>
<meta name=”viewport” content=”width-device-width, initial-scale=1.0”>
<title>JavaScript:void(0)</title>
</head>
 
<body>
    <center>
        <h1 style="color:green">GeeksforGeeks</h1>
        <h3>JavaScript:void(0)</h3>
        <a href="javascript:void(0);"
           ondblclick="alert('Welcome to Geeks for Geeks')">
Double click on me </a>
    </center>
</body>
 
</html>

Q-16:- How can a page be forced to load another page in JavaScript?
Ans:-Create a file named index.html. Add a heading and two buttons to it. One button forcefully loads a page with a live URL and the other button loads a local HTML page. In the <script> tag we have two functions, one loads gfg home page, and the second loads a local HTML page using window.location property.


<!DOCTYPE html>
<html lang="en">


  
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible"
        content="IE=edge">
    <meta name="viewport" content=
        "width=device-width, initial-scale=1.0">
</head>
  
<body>
    <h3>This is the original page</h3>
    <br>
  
    <button onclick="force_load_gfg()">
        Force Load GFG Page
    </button>
    <br><br>
  
    <button onclick="force_load_local()"> 
        Force Load Local HTML page
    </button>
  
    <script>
        function force_load_gfg() {
            window.location = 
                "https://www.geeksforgeeks.org/"
        }
  
        function force_load_local() {
            window.location = 
                "F:/gfg/PageRedirect/newPage.html"
        }
    </script>
</body>
  
</html>

---> Create a file named newPage.html. This is the local HTML page that would be loaded by Javascript.
newPage.html

<!DOCTYPE html>
<html lang="en">
  
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" 
        content="IE=edge">
    <meta name="viewport" content=
        "width=device-width, initial-scale=1.0">
    <title> New Page </title>
</head>
  
<body>
    <h3>This is the new loaded page</h3>
</body>
  
</html>


Q-17:-What are the disadvantages of using innerHTML in JavaScript?
Ans:-Disadvantages of using innerHTML property in JavaScript:


*The use of innerHTML very slow:- The process of using innerHTML is much slower as its contents as slowly built, also already parsed     
 contents and elements are also re-parsed which takes time.

*Content is replaced everywhere:- Either you add, append, delete or modify contents on a webpage using innerHTML, all contents is   
 replaced, also all the DOM nodes inside that element are reparsed and recreated.

*Preserves event handlers attached to any DOM elements:- The event handlers do not get attached to the new elements created by setting       
 innerHTML automatically. To do so one has to keep track of the event handlers and attach it to new elements manually. This may cause   
 a memory leak on some browsers.
 
*Appending to innerHTML is not supported:- Usually, += is used for appending in JavaScript. But on appending to an Html tag using     
 innerHTML, the whole tag is re-parsed.

Example:
<p id="geek">Geeks</p>
title = document.getElementById('#geek')


// The whole "geek" tag is reparsed
title.innerHTML += '<p> forGeeks </p>'

*Old content replaced issue:- The old content is replaced even if object.innerHTML = object.innerHTML + ‘html’ is used instead of   object.innerHTML += ‘html’. There is no way of appending without reparsing the whole innerHTML. Therefore, working with innerHTML becomes very slow. String concatenation just does not scale when dynamic DOM elements need to be created as the plus’ and quote openings and closings becomes difficult to track.

*Can break the document:- There is no proper validation provided by innerHTML, so any valid HTML code can be used. This may break the document of JavaScript. Even broken HTML can be used, which may lead to unexpected problems.

*Can also be used for Cross-site Scripting(XSS): The fact that innerHTML can add text and elements to the webpage, can easily be used by malicious users to manipulate and display undesirable or harmful elements within other HTML element tags. Cross-site Scripting may also lead to loss, leak and change of sensitive information.

Example:

<!DOCTYPE html> 
<html> 
  
<head> 
<meta charset=”UTF-8”>
<meta Http-equiv=”X-UA-Compatible” content=”IE=edge”>
<meta name=”viewport” content=”width-device-width, initial-scale=1.0”>


    <title>
        Using innerHTML in JavaScript
    </title> 
</head> 
  
<body style="text-align: center"> 
      
    <h1 style="color:green"> 
        GeeksforGeeks 
    </h1> 
  
    <p id="P">
        A computer science
        portal for geeks.
    </p> 
  
    <button onclick="geek()">
        Try it
    </button> 
  
    <p id="p"></p> 
  
    <script> 
        function geek() { 
            var x = document.getElementById("P")
                        .innerHTML; 
              
            document.getElementById("p")
                        .innerHTML = x; 
              
            document.getElementById("p")
                        .style.color = "green"; 
        } 
    </script> 
</body> 
  
</html>




























