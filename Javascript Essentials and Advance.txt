                                                                                                                                                     Modual-1 (Introduction ans Code Quality)

Q.1:-Write a program to Show an alert
Ans:-alert('Hello, this is an alert!');

Q.2:-What will be the result for these expressions?
Ans:-
Results for the expressions
console.log(5 > 4); // Result: true
console.log("apple" > "pineapple"); // Result: false
console.log("2" > "12"); // Result: true (comparison is done lexicographically)
console.log(undefined == null); // Result: true
console.log(undefined === null); // Result: false
console.log(null == "\n0\n"); // Result: false
console.log(null === +"\n0\n"); // Result: false

Q.3:-Will alert be shown?
Ans:-if ("0") { alert('Hello'); } // Yes, alert will be shown as "0" is a truthy value

Q.4:-What is the code below going to output? alert( null || 2 || undefined );
Ans:-alert(null || 2 || undefined); // Output: 2 (returns the first truthy value, which is 2)

Q.5:-The following function returns true if the parameter age is greater than
18. Otherwise it asks for a confirmation and returns its result:
function 
checkAge(age) 
{ 
if (age> 18) { return true; }
else {
// ...return confirm (‘did parents allow you?');
 }
 }
Ans:-
const checkAge = (age) => {
  if (age > 18) {
    return true;
  } else {
    // ...return confirm ('did parents allow you?');
    return confirm('Did parents allow you?');
  }
};


Q.6:-Replace Function Expressions with arrow functions in the code below:
Function
ask(question, yes, no) 
{ if (confirm(question))yes();
else 
no();
}
ask("Do you agree?", function()
{ alert("You agreed."); },
function() {
alert("You canceled the execution."); }
 }
Ans:-

Replace Function Expressions with arrow functions
const ask = (question, yes, no) => {
  if (confirm(question)) {
    yes();
  } else {
    no();
  }
};

ask(
  'Do you agree?',
  () => {
    alert('You agreed.');
  },
  () => {
    alert('You canceled the execution.');
  }
);


  
                                                                                                                                                                                Module-2 (Data Type And Objects)






● Write the code, one line for each action:
a)   Create an empty object user.
ans:-javascript
let user = {};

b)   Add the property name with the value John.
ans:-javascript
user.name = 'John';

c)   Add the property surname with the value Smith.
ans:-javascript
user.surname = 'Smith';

d)   Change the value of the name to Pete.
ans:-javascript
user.name = 'Pete';

e)   Remove the property name from the object.
ans:-javascript
delete user.name;


● Is array copied?
let fruits = ["Apples", "Pear", "Orange"]; // push a new value into the "copy" let 
shoppingCart = fruits; shoppingCart.push("Banana"); // what's in fruits?
alert( fruits.length ); // ?

Ans:-
```javascript
let fruits = ["Apples", "Pear", "Orange"];
let shoppingCart = fruits;
shoppingCart.push("Banana");
alert(fruits.length); // Output: 4 (fruits array is not copied, shoppingCart is referencing the same array as fruits)
```

● Map to names
let john = { name: "John", age: 25 }; let pete = { name: "Pete", age: 30 }; let mary = 
{ name: "Mary", age: 28 }; let users = [ john, pete, mary ]; let names = /* ... your 
code */ alert( names ); // John, Pete, Mary

Ans:-
```javascript
let john = { name: "John", age: 25 };
let pete = { name: "Pete", age: 30 };
let mary = { name: "Mary", age: 28 };
let users = [john, pete, mary];
let names = users.map(user => user.name);
alert(names); // Output: "John, Pete, Mary"
```

● Map to objects
let john = { name: "John", surname: "Smith", id: 1 }; let pete = { name: "Pete", 
surname: "Hunt", id: 2 }; let mary = { name: "Mary", surname: "Key", id: 3 }; let 
users = [ john, pete, mary ]; let usersMapped = /* ... your code ... */
/*
usersMapped = [
{ fullName: "John Smith", id: 1 },
{ fullName: "Pete Hunt", id: 2 },
{ fullName: "Mary Key", id: 3 }
]
*/ alert( usersMapped[0].id ) // 1 alert( usersMapped[0].fullName ) // John Smith

Ans:-

```javascript
let john = { name: "John", surname: "Smith", id: 1 };
let pete = { name: "Pete", surname: "Hunt", id: 2 };
let mary = { name: "Mary", surname: "Key", id: 3 };
let users = [john, pete, mary];
let usersMapped = users.map(user => ({ fullName: `${user.name} ${user.surname}`, id: user.id }));
/*
usersMapped = [
  { fullName: "John Smith", id: 1 },
  { fullName: "Pete Hunt", id: 2 },
  { fullName: "Mary Key", id: 3 }
]
*/
alert(usersMapped[0].id); // Output: 1
alert(usersMapped[0].fullName); // Output: "John Smith"
```

● Sum the properties There is a salaries object with arbitrary number of salaries. Write 
the function sumSalaries(salaries) that returns the sum of all salaries using 
Object.values and the for..of loop.If salaries is empty, then the result must be 0.
let salaries = {
"John": 100,
"Pete": 300,
"Mary": 250
};
alert( sumSalaries(salaries) ); // 650

Ans:-

```javascript
let salaries = {
  "John": 100,
  "Pete": 300,
  "Mary": 250
};

function sumSalaries(salaries) {
  let sum = 0;
  for (let salary of Object.values(salaries)) {
    sum += salary;
  }
  return sum;
}

alert(sumSalaries(salaries)); // Output: 650

● Destructuring assignment We have an object: Write the Destructuring assignment that 
reads:
a) Name property into the variable name.
b) Year’s property into the variable age.
c) isAdmin property into the variable isAdmin (false, if no such property)
d) let user = { name: "John", years: 30};

Ans:-

```javascript
let user = { name: "John", years: 30 };

let { name, years: age, isAdmin = false } = user;
```

● Turn the object into JSON and back Turn the user into JSON and then read it back 
into another variable.
user = { name: "John Smith", age: 35}

Ans:-

```javascript
let user = { name: "John Smith", age: 35 };

let userJSON = JSON.stringify(user); // Convert to JSON
let userCopy = JSON.parse(userJSON); // Parse JSON back into an object
```


                                                                                                                                           MODULE: 3 (Document, Event and Controls)



●  Create a program to hide/show the password:
ans:-

<!DOCTYPE html>
<html>
<head>
    <title>Show/Hide Password</title>
    <script>
        function togglePassword() {
            const passwordField = document.getElementById("password");
            if (passwordField.type === "password") {
                passwordField.type = "text";
            } else {
                passwordField.type = "password";
            }
        }
    </script>
</head>
<body>
    <label for="password">Password:</label>
    <input type="password" id="password">
    <button onclick="togglePassword()">Show/Hide</button>
</body>
</html>

●  Create a program that will select all the classes and loop over and whenever i click the 
button the alert should show
ans:-

<!DOCTYPE html>
<html>
<head>
    <title>Select Classes and Alert</title>
    <script>
        function showAlert() {
            const elements = document.getElementsByClassName("example-class");
            for (let i = 0; i < elements.length; i++) {
                alert(elements[i].innerText);
            }
        }
    </script>
</head>
<body>
    <p class="example-class">Class 1</p>
    <p class="example-class">Class 2</p>
    <p class="example-class">Class 3</p>
    <button onclick="showAlert()">Click me</button>
</body>
</html>

● Create a form and validate using JavaScript
ans:-

<!DOCTYPE html>
<html>
<head>
    <title>Form Validation</title>
    <script>
        function validateForm() {
            const name = document.getElementById("name").value;
            const email = document.getElementById("email").value;

            if (name === "" || email === "") {
                alert("Please fill in all fields");
                return false;
            }
            return true;
        }
    </script>
</head>
<body>
    <form onsubmit="return validateForm()">
        <label for="name">Name:</label>
        <input type="text" id="name"><br><br>
        <label for="email">Email:</label>
        <input type="email" id="email"><br><br>
        <input type="submit" value="Submit">
    </form>
</body>
</html>

● Create a modal box using css and Js with three buttons
ans:-

      HTML
  
<!DOCTYPE html>
<html>
<head>
    <title>Modal Box with Buttons</title>
    <link rel="stylesheet" href="modalbox.css">
</head>
<body>

<!-- The Modal -->
<div id="myModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <p>Modal Content</p>
        <button id="button1">Button 1</button>
        <button id="button2">Button 2</button>
        <button id="button3">Button 3</button>
    </div>
</div>

<!-- Button to open the modal -->
<button id="openModalBtn">Open Modal</button>

<script >// Get the modal element
    const modal = document.getElementById("myModal");
    
    // Get the button that opens the modal
    const openModalBtn = document.getElementById("openModalBtn");
    
    // Get the close button element
    const closeButton = document.getElementsByClassName("close")[0];
    
    // Function to open the modal
    function openModal() {
        modal.style.display = "block";
    }
    
    // Function to close the modal
    function closeModal() {
        modal.style.display = "none";
    }
    
    // Event listener for opening the modal
    openModalBtn.addEventListener("click", openModal);
    
    // Event listener for closing the modal using the close button
    closeButton.addEventListener("click", closeModal);
    
    // Event listener for closing the modal when clicking outside the modal content
    window.addEventListener("click", function(event) {
        if (event.target === modal) {
            modal.style.display = "none";
        }
    });
    
    // Event listeners for buttons inside the modal
    document.getElementById("button1").addEventListener("click", function() {
        alert("Button 1 clicked");
    });
    
    document.getElementById("button2").addEventListener("click", function() {
        alert("Button 2 clicked");
    });
    
    document.getElementById("button3").addEventListener("click", function() {
        alert("Button 3 clicked");
    });
    </script>
</body>
</html>


     CSS

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}


● Use external js library to show slider
ans:-

<!DOCTYPE html>
<html>
<head>
    <title>Slider Example</title>
    <!-- Link Swiper's CSS -->
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css">
    <style>
        /* Optional: Add some custom styles for the slider container */
        .swiper-container {
            width: 100%;
            height: 300px; /* Adjust the height as needed */
        }
        .swiper-slide {
            text-align: center;
            font-size: 18px;
            background: #fff;
            /* Other styles for each slide */
        }
    </style>
</head>
<body>

<!-- Slider container -->
<div class="swiper-container">
    <div class="swiper-wrapper">
        <!-- Slides -->
        <div class="swiper-slide">Slide 1</div>
        <div class="swiper-slide">Slide 2</div>
        <div class="swiper-slide">Slide 3</div>
        <!-- Add more slides as needed -->
    </div>
    <!-- Add pagination -->
    <div class="swiper-pagination"></div>
</div>

<!-- Link Swiper's JS -->
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<!-- Initialize Swiper -->
<script>var swiper = new Swiper('.swiper-container', {
    pagination: {
        el: '.swiper-pagination',
        clickable: true, // Optional: Enables clickable pagination bullets
    },
});</script>
</body>
</html>

● Prevent the browser when i click the form submit button
ans:-

<!DOCTYPE html>
<html>
<head>
    <title>Prevent Form Submission</title>
    <script src="script.js" defer></script>
</head>
<body>

<!-- Your form -->
<form id="myForm">
    <label for="name">Name:</label>
    <input type="text" id="name"><br><br>
    <label for="email">Email:</label>
    <input type="email" id="email"><br><br>
    <input type="submit" value="Submit">
</form>
<script>// Select the form element
    const form = document.getElementById('myForm');
    
    // Prevent form submission
    form.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevents the default form submission behavior
    
        // Add your form validation logic here if needed
    
        // For demonstration, here's an example alert:
        alert('Form submission prevented. Add your custom logic here.');
    });
    </script>
</body>
</html>



																			MODULE: 4 (New Request)

● What is JSON
ans:-JSON (JavaScript Object Notation) is a lightweight data interchange format used to transmit data between a server and a web application. It's easy for humans to read and write and easy for machines to parse and generate. JSON is based on a subset of JavaScript syntax but is language-independent. It's often used to represent structured data, commonly used in APIs for data transmission.

● What is promises
ans:-Promises are objects in JavaScript used to handle asynchronous operations. They represent a value that may not be available yet but will be resolved or rejected in the future, allowing asynchronous code to be written in a cleaner and more manageable way. A promise can be in one of three states: pending (initial state), fulfilled (resolved), or rejected (an error occurred).

● Write a program of promises and handle that promises also
ans:-

// Function that returns a promise
function checkNumber(number) {
    return new Promise((resolve, reject) => {
        if (typeof number === 'number') {
            resolve(`Success! ${number} is a number.`);
        } else {
            reject(`Error! ${number} is not a number.`);
        }
    });
}

// Using the promise and handling it
checkNumber(42)
    .then(successMessage => {
        console.log(successMessage);
    })
    .catch(errorMessage => {
        console.error(errorMessage);
    });

checkNumber('Hello')
    .then(successMessage => {
        console.log(successMessage);
    })
    .catch(errorMessage => {
        console.error(errorMessage);
    });

● Use fetch method for calling an api https://fakestoreapi.com/products
ans:-

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <!-- CSS only -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
  </head>
  <body>
    
    <div class="container">
	  <div id="loading" class="spinner-border text-muted mt-5"></div>		
      <div class="row" id="btn"></div>
    </div>
    <script>
         
      let btn = document.getElementById("btn");

      function showData(data) 
	  {
		for(const myData of data) 
		{
		  let htmlData = ` <div class="col-md-3">
			<div class="card">
			  <img src="${myData.thumbnailUrl}" class="card-img-top" alt="" />
			  <div class="card-body">
				<h5 class="card-title">${myData.title}</h5>
			  </div>
			</div>
		  </div>`;
		  btn.insertAdjacentHTML("afterbegin", htmlData);
		}
      }
	  
     
	fetch("https://fakestoreapi.com/products")
	  .then((response) => {
		return response.json();
	  })
	  .then((data) => {
		showData(data)
		document.getElementById('loading').style.display="none";
	  })
	  .catch((err) => console.log(err));
      
    </script>
    
  </body>
</html>


● Display all the product from the api in your HTML page
ans:-

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <!-- CSS only -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
  </head>
  <body>
   
    <div class="container">
      <div class="row" id="mydatalist">
		
	  </div>
    </div>
    <script>
	
	/*
	fetch('https://jsonplaceholder.typicode.com/todos/1')
	  .then(response => response.json())
	  .then(json => console.log(json))
	*/
	
	
	
		
		// https://fakestoreapi.com/products   all products
		//https://fakestoreapi.com/products/2    id=2  get data
		//https://fakestoreapi.com/products?category=jewelery      // get data by category
		
	
		/*
		fetch()
		.then(function(res){})// resp json
		.then(function(object){})// resp object.
		.catch(function(arr){}) // if api wrong 
	*/
	
         fetch("https://fakestoreapi.com/products")
           .then(function (resp) {
             return resp.json();
           })
           .then(function (object) {
		   
             display(object); // call display function
           
		   })
           .catch(function (err) {
             console.log(err);
           });
      
	    let mydatalist = document.getElementById("mydatalist");

		function display(object)
		{
			for(const myData of object) 
			{
			  let htmlData = ` 
					  <div class="col-md-4 p-5">
						<div class="card">
						  <img src="${myData.image}" height="200px" class="card-img-top" alt="" />
						  <div class="card-body">
							<h5 class="card-title">${myData.title.slice(0, 10)}...</h5>
							<p class="card-text">${myData.description.slice(0, 10)}...</p>
							<p class="card-text">Price : ${myData.price}</p>
							<a href="#" class="btn btn-primary">Order Now</a>
						  </div>
						</div>
					  </div>`;
			  mydatalist.insertAdjacentHTML("afterbegin", htmlData);
			}
       }

     
    </script>
    
  </body>
</html>







